# The built abstractions on the librdmacm library to allow for easier interfacing with
# rdma such as providing abstractions over buffers, rdma connections, etc
# I can treat it as a black box for now (but will become more relevant to me when working on libfabric impl)
rdmalib/


server/


# misc stuff
server/structures.hpp
server/common.hpp
server/common
server/common/readerwriterqueue.h
server/atomicops.h


# Manage requests to actual executors
# This is the "lightweight allocator" described in the paper (Not sure about this tho)
# Connect clients with executors
server/executor_manager
server/executor_manager/settings.cpp
server/executor_manager/settings.hpp

server/executor_manager/accounting.hpp

# run docker_rdma_sriov and executor binary CLI to send computation (RDMA-)requests (function calls)
server/executor_manager/executor_process.hpp
server/executor_manager/executor_process.cpp

server/executor_manager/manager.hpp
server/executor_manager/manager.cpp

# A client which makes actual function invokations
# The ibv_pd struct in the constructor contains information on which function is to be called
# from the executor's shared library of invokable functions
# Also contains the payload
server/executor_manager/client.hpp
server/executor_manager/client.cpp

# CLI interface and options to start a executor_manager server
# The server will listen for incoming RDMA connections and accept them
server/executor_manager/cli.cpp
server/executor_manager/opts.cpp

# The worker node server. Actually execute functions/containers
# read from SO file and perform actual computation.
# The server binary is installed on workers and listens for connections (from RDMA) and then executes code
# and responds with response
# The CLI is installed on the ExecutorManager server
# It acts as a client which sends requests to the servers installed on workers
# This does not handle docker stuff, since if a docker container is executed, the ExecutorManager called
# the docker_rdma_sriov binary, not the executor-cli binary
#
# Q: How do you run an instance of an actual server?
server/executor

# The executor itself. The actual function calls happen here
server/executor/fast_executor.hpp
server/executor/fast_executor.cpp

# Load a shared object file into memory and provide an abstraction on the shared library
# to make calling functions in it nicer.
server/executor/functions.hpp
server/executor/functions.cpp

# Listen for RDMA connections / requests for function invokations.
# Create FastExecutor instances for function invokation requests, which will ultimately
# execute the code
server/executor/server.cpp
server/executor/server.hpp

# CLI for the executor server. 
server/executor/cli.cpp
server/executor/opts.cpp




# Manage resources -- basically the frontend for resource management
server/resource_manager

# Basically a database of server IPs and ports, and cores
# A vector of rfaas::server (in rfaas/include/resources.cpp) objects
server/resource_manager/db.hpp
server/resource_manager/db.cpp

# Literally just an http wrapper around the DB that supports adding
# and removing resources from the DB
server/resource_manager/http.cpp
server/resource_manager/http.hpp

# Various settings
server/resource_manager/settings.cpp
server/resource_manager/settings.hpp

server/resource_manager/manager.hpp
server/resource_manager/manager.cpp

# Run a HTTP server and start the manager
server/resource_manager/cli.cpp
server/resource_manager/opts.cpp



for docker execution
need to:
[ ] Allow user to supply docker image
[ ] 
